@model UpdateFinanceDto
@{
    ViewData["Title"] = "Finans Güncelleme Sayfası";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<form id="updateFinanceForm" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />

    <div class="mb-3">
    <label asp-for="Type" class="form-label fw-semibold text-primary-light text-sm mb-8">
        Finans Tipi <span class="text-danger-600">*</span>
    </label>
    <select asp-for="Type" class="form-control d-inline-flex align-items-center" required>
        <option value="" disabled selected>Finans Tipi Seçin</option>
        <option value="Income">Gelir</option>
        <option value="Expense">Gider</option>
    </select>
    <span asp-validation-for="Type" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Title" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Finans Adı <span class="text-danger-600">*</span>
        </label>
        <input type="text" asp-for="Title" class="form-control" maxlenght="40" required />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="mb-3">
    <label asp-for="Amount" class="form-label fw-semibold text-primary-light text-sm mb-8">
        Finans Miktarı <span class="text-danger-600">*</span>
    </label>
    <input type="number" asp-for="Amount" class="form-control" min="0" max="50000"
            oninput="if(this.value > 50000) this.value = 50000;" required />
    <span asp-validation-for="Amount" class="text-danger"></span>
    </div>

    <button type="button" class="btn rounded-pill btn-warning-600 radius-8 d-inline-flex align-items-center btn-sm" onclick="updateFinance()">
        <span class="material-symbols-outlined me-1 d-inline-flex align-items-center" style="font-size: 18px;">update</span>
        Güncelle
    </button>
</form>

@section Scripts {

    <script>
        function updateFinance() {
            const form = document.getElementById("updateFinanceForm");
            const theme = document.documentElement.getAttribute("data-theme");

            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            Swal.fire({
                title: "Değişiklikler kaydedilsin mi?",
                text: "İşlemi onaylıyor musunuz?",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, kaydet!",
                cancelButtonText: "İptal",
                background: theme === "dark" ? "#1e1e2f" : "#fff",
                color: theme === "dark" ? "#fff" : "#000",
                reverseButtons: true,
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit();
                }
            });
        }

    </script>
}
