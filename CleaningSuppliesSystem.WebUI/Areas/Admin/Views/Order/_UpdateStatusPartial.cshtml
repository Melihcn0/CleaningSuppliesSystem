@model ResultOrderDto
@using System.Globalization

<div class="modal-header">
    <h5 class="modal-title" id="orderDetailModalLabel">Sipariş Detayı</h5>
    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
</div>
<div class="modal-body">

    <div class="row mb-3">
        <div class="col-md-6">
            <p><strong>Sipariş No:</strong> #@Model.OrderNumber</p>
            <p><strong>Sipariş Tarihi:</strong> @Model.CreatedDate.ToString("dd MMMM yyyy HH:mm", new CultureInfo("tr-TR"))</p>
        </div>
        <div class="col-md-6">
            <p><strong>Toplam Tutar:</strong> @Model.OrderItems?.Sum(x => x.UnitPrice * x.Quantity).ToString("C")</p>
            <div class="d-flex align-items-center gap-2">
                <strong>Durum:</strong>
                <div>
                    <span class="@(GetStatusClass(Model.Status))" style="margin-right: 15px;">
                        @Model.Status
                    </span>
                        @{
                            var statusDates = new Dictionary<string, DateTime?>()
                        {
                            { "Onay Bekleniyor", null },
                            { "Onaylandı", Model.ApprovedDate },
                            { "Hazırlanıyor", Model.PreparingDate },
                            { "Kargoya Verildi", Model.ShippedDate },
                            { "Teslim Edildi", Model.DeliveredDate },
                            { "İptal Edildi", Model.CanceledDate }
                        };                            
                        }
                </div>
            </div>
        </div>
    </div>

    <h6 class="fw-bold mt-4 mb-3">Sipariş Edilen Ürünler</h6>
    @if (Model.OrderItems?.Any() == true)
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Ürün Adı</th>
                        <th>Adet</th>
                        <th>Birim Fiyat</th>
                        <th>Toplam</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderItems)
                    {
                        <tr>
                            <td>@item.Product?.Name</td>
                            <td>@item.Quantity</td>
                            <td>@item.UnitPrice.ToString("C")</td>
                            <td>@((item.UnitPrice * item.Quantity).ToString("C"))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">Bu siparişte ürün bulunmamaktadır.</div>
    }

    <hr />
    <h6 class="fw-bold mt-3 mb-3">Sipariş Durumunu Güncelle</h6>

    <form id="updateStatusForm">
        @Html.AntiForgeryToken()
        <input type="hidden" name="Id" value="@Model.Id" />

        <div class="row mb-2">
            <div class="col-4 fw-bold">Sipariş durumu:</div>
            <div class="col-8 fw-bold">İşlem tarihi:</div>
        </div>

        @foreach (var status in statusDates.Keys)
        {
            var id = "status" + status.Replace(" ", "").Replace("İ", "I");
            DateTime? date = null;

            if (status == "Onay Bekleniyor")
            {
                date = Model.CreatedDate;
            }
            else
            {
                date = statusDates[status];
            }

            string formattedDate = date?.ToString("dd.MM.yyyy", new CultureInfo("tr-TR"));

            <div class="row align-items-center mb-2">
                <div class="col-4 d-flex align-items-center gap-2">
                    <input class="form-check-input" type="radio" name="Status" id="@id" value="@status"
                    @(string.Equals(Model.Status, status, StringComparison.OrdinalIgnoreCase) ? "checked" : "") />
                    <label class="form-check-label" for="@id">@status</label>
                </div>
                <div class="col-8">
                    @if (!string.IsNullOrEmpty(formattedDate))
                    {
                        <span>@formattedDate</span>
                    }
                </div>
            </div>
        }


        <button type="submit" class="btn btn-warning-600 mt-3">Durumu Güncelle</button>
    </form>
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
</div>

<script>
    $(document).ready(function () {
        var currentStatus = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Status));

        var disabledOptionsByCurrentStatus = {
            "Onay Bekleniyor": ["Hazırlanıyor", "Kargoya Verildi", "Teslim Edildi"],
            "Onaylandı": ["Kargoya Verildi", "Teslim Edildi"],
            "Hazırlanıyor": ["Onay Bekleniyor", "Teslim Edildi"],
            "Kargoya Verildi": ["Onay Bekleniyor", "Onaylandı"],
            "Teslim Edildi": ["Onay Bekleniyor", "Onaylandı", "Hazırlanıyor"]
        };

        var toDisable = disabledOptionsByCurrentStatus[currentStatus] || [];
        var disabledNormalized = toDisable.map(x => x.toLowerCase().trim());

        $('input[name="Status"]').each(function () {
            var val = $(this).val().toLowerCase().trim();

            if (val === "iptal edildi") {
                $(this).prop('disabled', false);
                return;
            }

            if (disabledNormalized.includes(val)) {
                $(this).prop('disabled', true);
            } else {
                $(this).prop('disabled', false);
            }
        });

        $('#updateStatusForm').on('submit', function (e) {
            e.preventDefault();

            var updateDto = {
                Id: Number($(this).find('[name="Id"]').val()),
                Status: $(this).find('input[name="Status"]:checked').val()
            };

            var token = $(this).find('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("UpdateStatus", "Order")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updateDto),
                headers: {
                    'RequestVerificationToken': token
                },
                success: function () {
                    $('#orderUpdateStatusModal').modal('hide');
                    window.location.reload();
                },
                error: function (xhr) {
                    if (xhr.status === 401) {
                        alert('Yetkilendirme hatası oluştu. Lütfen tekrar giriş yapın.');
                    } else if (xhr.status === 404) {
                        alert('Sipariş bulunamadı.');
                    } else {
                        alert('Durum güncellenirken hata oluştu.');
                    }
                }
            });
        });
    });
</script>

@functions {
    public string GetStatusClass(string status)
    {
        return status switch
        {
            "Teslim Edildi" => "badge text-sm fw-semibold bg-dark-success-gradient px-20 py-9 radius-4 text-white",
            "Hazırlanıyor" => "badge text-sm fw-semibold bg-dark-primary-gradient px-20 py-9 radius-4 text-white",
            "İptal Edildi" => "badge text-sm fw-semibold bg-dark-danger-gradient px-20 py-9 radius-4 text-white",
            "Kargoya Verildi" => "badge text-sm fw-semibold bg-dark-info-gradient px-20 py-9 radius-4 text-white",
            "Onay Bekleniyor" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
            "Onaylandı" => "badge text-sm fw-semibold bg-dark-lilac-gradient px-20 py-9 radius-4 text-white",
            _ => "badge text-sm fw-semibold bg-dark-dark-gradient px-20 py-9 radius-4 text-white"
        };
    }
}
