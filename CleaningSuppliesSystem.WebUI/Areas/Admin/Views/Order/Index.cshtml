@model PagedResponse<AdminResultOrderDto>

@{
    ViewData["Title"] = "Siparişler";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

}

<div class="p-16 bg-transparent radius-8 border-start-width-3-px mb-24 shadow-4">
    <h6 class="mb-2" style="font-size: 1rem;">Sipariş Yönetimi Notları</h6>
    <ul class="mb-2 ps-3" style="list-style-type: disc; font-size: 0.9rem;">
        <li>Siparişin ödemesi geldiğinde, durumunu 'Hazırlanıyor' olarak güncelleyiniz.</li>
        <li>Sipariş durumu 'Hazırlanıyor' olduğunda, fatura otomatik olarak oluşturulacaktır.</li>
        <li>Sipariş hazırlandığında, durumunu 'Kargoya Verildi' olarak değiştiriniz.</li>
        <li>Sipariş durumu 'Kargoya Verildi' olduğunda, irsaliye fatura otomatik olarak oluşturulacaktır.</li>
    </ul>
    <strong>
        <small class="d-block mt-2">
            Not: Fatura oluşturulduktan sonra sipariş numarasını kontrol etmeyi unutmayın.
        </small>
    </strong>
</div>
<div class="card basic-data-table">
    @Html.AntiForgeryToken()
    <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
        <h5 class="card-title mb-0">Gelen Siparişler</h5>
    </div>
    <div class="card-body">
        <!-- Filtreleme ve sayfa başına veri dropdown'u -->
        <div class="d-flex align-items-center mb-2 gap-3">
            <!-- Arama label + input -->
            <div class="d-flex align-items-center">
                <label for="customSearch" class="me-3">Ara :</label>
                <input type="text" id="customSearch" class="form-control" placeholder="Ara..." style="width: 200px;" />
            </div>

            <!-- Sayfa başına dropdown -->
            <div class="d-flex align-items-center">
                <label for="pageSizeSelect" class="me-3">Sayfa başına :</label>
                <select id="pageSizeSelect" class="form-select w-auto select-balanced">
                    @foreach (var size in new int[] { 10, 30, 50, 100 })
                    {
                        if (Model.PageSize == size)
                        {
                            <option value="@size" selected>@size</option>
                        }
                        else
                        {
                            <option value="@size">@size</option>
                        }
                    }
                </select>
            </div>
        </div>
       @if (Model != null && Model.Data.Any())
        {
        <div class="table-responsive" style="overflow-y: hidden;">
            <table class="table table-hover mb-0" id="dataTable" style="width: 100%; margin-top: 10px;">
                <thead>
                    <tr>
                        <th class="no-sort">#</th>
                        <th>Sipariş No | Sipariş Veren</th>
                        <th class="no-sort">Sipariş Tarihi</th>
                        <th class="no-sort">Ödenecek Tutar</th>
                        <th class="no-sort">Durum</th>
                        <th class="no-sort">İşlem</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Data)
                    {
                        var statusClass = item.Status switch
                        {
                                "Teslim Edildi" => "badge text-sm fw-semibold bg-dark-success-gradient px-20 py-9 radius-4 text-white",
                                "Hazırlanıyor" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
                                "İptal Edildi" => "badge text-sm fw-semibold bg-dark-danger-gradient px-20 py-9 radius-4 text-white",
                                "Kargoya Verildi" => "badge text-sm fw-semibold bg-dark-primary-gradient px-20 py-9 radius-4 text-white",
                                "Onay Bekleniyor" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
                                "Onaylandı" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
                                _ => "badge text-sm fw-semibold bg-dark-dark-gradient px-20 py-9 radius-4 text-white"
                        };
                        <tr>
                            <td></td>
                             <td><b><u>#@item.OrderNumber</u></b> - <b><u>@($"{item.FirstName} {item.LastName}")</u></b></td>
                            <td>
                                <span>
                                    🟢 <b>Oluşturma:</b>
                                    @item.CreatedDate.ToString("dd.MM.yyyy HH:mm")
                                </span>
                            </td>
                            <td>@item.TotalAmountWithVat.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</td>
                            <td><span class="@statusClass">@item.Status</span></td>
                            <td class="d-flex flex-wrap gap-2">
                                <!-- Detay -->
                                <button type="button"
                                        class="btn btn-lilac-600 btn-sm rounded d-inline-flex align-items-center js-show-readonly-order"
                                        data-order-id="@item.Id"
                                        title="Detay">
                                    <span class="material-symbols-outlined" style="font-size: 18px;">read_more</span>
                                </button>

                                <!-- Sipariş Durumu Güncelle -->
                                @if (item.Status != "Teslim Edildi" && item.Status != "İptal Edildi")
                                {
                                    <button type="button"
                                            class="btn btn-warning-600 btn-sm rounded d-inline-flex align-items-center js-show-update-status"
                                            data-order-id="@item.Id"
                                            title="Sipariş Durumu Güncelle">
                                        <span class="material-symbols-outlined" style="font-size: 18px;">app_badging</span>
                                    </button>
                                }

                                <!-- İrsaliyeli Fatura -->
                                @if (item.Status == "Kargoya Verildi" || item.Status == "Teslim Edildi")
                                {
                                    <a asp-controller="Order"
                                        asp-action="DownloadDeliveryNoteInvoice"
                                        asp-route-orderId="@item.Id"
                                        class="btn btn-light-600 text-dark btn-sm rounded d-inline-flex align-items-center"
                                        title="İrsaliyeli Faturayı İndir">
                                        <span class="material-symbols-outlined" style="font-size: 18px;">download</span>
                                        İrsaliye
                                    </a>
                                }

                                <!-- Fatura -->
                                @if (item.Status == "Hazırlanıyor" || item.Status == "Kargoya Verildi" || item.Status == "Teslim Edildi")
                                {
                                    <a asp-controller="Order"
                                        asp-action="DownloadInvoice"
                                        asp-route-orderId="@item.Id"
                                        class="btn btn-light-600 text-dark btn-sm rounded d-inline-flex align-items-center"
                                        title="Faturayı İndir">
                                        <span class="material-symbols-outlined" style="font-size: 18px;">download</span>
                                        Fatura
                                    </a>
                                }

                                <!-- Sil -->
                                <button type="button"
                                        class="btn btn-danger-600 btn-sm rounded d-inline-flex align-items-center delete-btn"
                                        data-id="@item.Id">
                                    <span class="material-symbols-outlined">delete_forever</span>
                                </button>
                            </td>


                    </tr>
                }

            </tbody>
        </table>
                @if (Model.TotalPages > 1)
                {
                    <div class="d-flex justify-content-end my-1">
                        <ul class="pagination d-flex flex-wrap align-items-center justify-content-end" style="gap:2px;">
                            <!-- İlk sayfa -->
                            <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px rounded-pill rounded-end-0"
                                   href="@Url.Action("Index", new { page = 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="ep:d-arrow-left" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Önceki -->
                            <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px"
                                   href="@Url.Action("Index", new { page = Model.Page - 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="iconamoon:arrow-left-2-light" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Sayfa numaraları -->
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px @(i == Model.Page ? "bg-primary-600 text-white" : "")"
                                       href="@Url.Action("Index", new { page = i, pageSize = Model.PageSize })">@i</a>
                                </li>
                            }

                            <!-- Sonraki -->
                            <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px"
                                   href="@Url.Action("Index", new { page = Model.Page + 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="iconamoon:arrow-right-2-light" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Son sayfa -->
                            <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px rounded-pill rounded-start-0"
                                   href="@Url.Action("Index", new { page = Model.TotalPages, pageSize = Model.PageSize })">
                                    <iconify-icon icon="ep:d-arrow-right" class="text-lg"></iconify-icon>
                                </a>
                            </li>
                        </ul>
                    </div>
                }
        </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-shopping-cart fa-3x mb-3 opacity-25"></i>
                <h5>Hiç sipariş bulunamadı</h5>
                <p>Henüz bir siparişiniz bulunmamaktadır.</p>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content" id="orderDetailModalContent">
        </div>
    </div>
</div>

<div class="modal fade" id="orderUpdateStatusModal" tabindex="-1" aria-labelledby="orderUpdateStatusModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content" id="orderUpdateStatusModalContent">
        </div>
    </div>
</div>

<div class="modal fade" id="orderReadOnlyModal" tabindex="-1" aria-labelledby="orderReadOnlyModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content" id="orderReadOnlyModalContent">
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(function(){
            let currentOrderId = null;

            const detailModalEl = $('#orderDetailModal');
            const detailModalContent = $('#orderDetailModalContent');

            const statusModalEl = $('#orderUpdateStatusModal');
            const statusModalContent = $('#orderUpdateStatusModalContent');

            const readonlyModalEl = $('#orderReadOnlyModal');
            const readonlyModalContent = $('#orderReadOnlyModalContent');

            const bsDetailModal = new bootstrap.Modal(detailModalEl[0], {backdrop:'static', keyboard:false});
            const bsStatusModal = new bootstrap.Modal(statusModalEl[0], {backdrop:'static', keyboard:false});
            const bsReadonlyModal = new bootstrap.Modal(readonlyModalEl[0], { backdrop: 'static', keyboard: false });

            const getToken = () => $('input[name="__RequestVerificationToken"]').val();

            // --- Yardımcı Fonksiyonlar ---
            function showLoading(content){
                content.html(`
                    <div class="modal-header">
                        <h5 class="modal-title">Yükleniyor...</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center p-5">
                        <div class="spinner-border text-primary" role="status"></div>
                    </div>
                `);
            }

            function showError(content, message){
                content.html(`
                    <div class="modal-header">
                        <h5 class="modal-title text-danger">Hata</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body"><div class="alert alert-danger">${message}</div></div>
                `);
            }

            function reloadOrUpdateModal(orderId){
                $.get('/Admin/Order/OrderDetails/' + orderId, function(data){
                    if($(data).find('tbody tr').length === 0) location.reload();
                    else loadOrderDetail(orderId);
                });
            }

            // Normal sipariş detayları
            function loadOrderDetail(orderId){
                showLoading(detailModalContent);
                bsDetailModal.show();

                $.get('/Admin/Order/OrderDetails/' + orderId)
                .done(function(data){
                    if($(data).find('tbody tr').length === 0) return location.reload();
                    detailModalContent.html(data);
                    initOrderDetailDataTable();
                })
                .fail(function(xhr){
                    let msg = xhr.status===403 ? "Bu siparişi görüntüleme yetkiniz yok." :
                              xhr.status===404 ? "Sipariş bulunamadı." : "Sipariş detayı yüklenemedi.";
                    showError(detailModalContent, msg);
                });
            }

            // İptal edilen ve tamamlanan siparişler
            function loadOrderReadOnlyDetail(orderId){
                showLoading(readonlyModalContent); // ✅ detailModalContent yerine readonlyModalContent
                bsReadonlyModal.show(); // ✅ detail modal değil readonly modal açılmalı

                $.get('/Admin/Order/ReadOnlyDetails/' + orderId)
                .done(function(data){
                    if($(data).find('tbody tr').length === 0) return location.reload();
                    readonlyModalContent.html(data); // ✅ doğru content
                    initReadOnlyOrderDataTable();
                })
                .fail(function(xhr){
                    let msg = xhr.status===403 ? "Bu siparişi görüntüleme yetkiniz yok." :
                              xhr.status===404 ? "Sipariş bulunamadı." : "Sipariş detayı yüklenemedi.";
                    showError(readonlyModalContent, msg); // ✅ doğru content
                });
            }


            // Event binding
            $(document).on('click', '.js-show-order-detail', function(e){
                e.preventDefault();
                currentOrderId = $(this).data('order-id');
                loadOrderDetail(currentOrderId);
            });

            $(document).on('click', '.js-show-readonly-order', function(e){
                e.preventDefault();
                currentOrderId = $(this).data('order-id');
                loadOrderReadOnlyDetail(currentOrderId);
            });


            function loadUpdateStatus(orderId){
                showLoading(statusModalContent);
                bsStatusModal.show();

                $.get('/Admin/Order/UpdateStatus/' + orderId)
                .done(function(data){
                    statusModalContent.html(data);
                    initUpdateStatusDataTable();
                })
                .fail(function(xhr){
                    let msg = xhr.status===403 ? "Bu sipariş durumunu güncelleme yetkiniz yok." :
                              xhr.status===404 ? "Sipariş bulunamadı." : "Sipariş durumu yüklenemedi.";
                    showError(statusModalContent, msg);
                });
            }

            $(document).on('click', '.js-show-update-status', function(e){
                e.preventDefault();
                currentOrderId = $(this).data('order-id');
                loadUpdateStatus(currentOrderId);
            });

            function showToast(message, type='success', dark=false){
                Swal.fire({
                    icon: type,
                    title: type === 'success' ? 'Başarılı' : 'Hata',
                    html: message,
                    timer: 1500,
                    timerProgressBar: true,
                    showConfirmButton: false,
                    background: dark ? '#1e1e2f' : '#fff',
                    color: dark ? '#fff' : '#000',
                    reverseButtons: true,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    allowEnterKey: false,
                    didOpen: () => {
                        const bar = document.querySelector('.swal2-timer-progress-bar');
                        if(bar) bar.style.backgroundColor = type === 'success' ? '#28a745' : '#dc3545';
                    }
            });
        }

                        // --- Miktar Arttır ---
        $(document).on('click', '.btn-increment', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem seçilen ürüne yalnızca 1 adet ekleyecektir.',
                icon:'question',
                showCancelButton:true,
                confirmButtonText:'Evet, arttır',
                cancelButtonText:'Hayır',
                confirmButtonColor: dark ? '#198754' : '#28a745',
                cancelButtonColor: dark ? '#dc3545' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

            addHoverEffect(confirmBtn, "#198754");
            addHoverEffect(cancelBtn, "#dc3545");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Customer/Order/Increment',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Miktar başarıyla arttırıldı.', 'success', dark);
                        $.get('/Customer/Order/OrderDetails/' + currentOrderId, function(data){
                            if($(data).find('tbody tr').length === 0) location.reload();
                            else loadOrderDetail(currentOrderId);
                        });
                    })
                    .fail(()=>showToast('Miktar arttırılamadı.', 'error', dark));
                }
            });
        });

        // --- Miktar Azalt ---
        $(document).on('click', '.btn-decrement', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem seçilen üründen yalnızca 1 adet azaltacaktır.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Evet, azalt',
                cancelButtonText:'Hayır',
                confirmButtonColor: dark ? '#198754' : '#28a745',
                cancelButtonColor: dark ? '#dc3545' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

            addHoverEffect(confirmBtn, "#198754");
            addHoverEffect(cancelBtn, "#dc3545");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Admin/Order/Decrement',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Miktar başarıyla azaltıldı.', 'success', dark);
                        reloadOrUpdateModal(currentOrderId);
                    })
                    .fail(()=>{
                        showToast('Miktar azaltılamadı.', 'error', dark);
                    });
                }
            });
        });

        // --- Ürün Sil ---
        $(document).on('click', '.btn-remove', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem ile sepetten bu ürünün tamamı çıkarılacaktır.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Tamam',
                cancelButtonText:'İptal',
                confirmButtonColor: dark ? '#0d6efd' : '#007bff',
                cancelButtonColor: dark ? '#6c757d' : '#6c757d',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                reverseButtons: true,
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Admin/Order/Remove',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Ürün başarıyla silindi.', 'success', dark);
                        reloadOrUpdateModal(currentOrderId);
                    })
                    .fail(()=>{
                        showToast('Ürün silinemedi.', 'error', dark);
                    });
                }
            });
        });

        // --- Sipariş Onayla ---
        window.confirmOrder = function(orderId){
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Siparişi onaylamak istiyor musunuz?',
                text:'Bu işlem geri alınamaz.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Tamam',
                cancelButtonText:'İptal',
                confirmButtonColor:'#28a745',
                cancelButtonColor:'#dc3545',
                reverseButtons: true,
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.ajax({
                        url:'/Admin/Order/UpdateStatus',
                        type:'POST',
                        contentType:'application/json',
                        data:JSON.stringify({Id:orderId, Status:'Onaylandı'}),
                        headers:{'RequestVerificationToken':getToken()},
                        success:()=>showToast('Sipariş başarıyla onaylandı.', 'success', dark),
                        error:()=>showToast('Sipariş onaylanamadı.', 'error', dark)
                    });
                }
            });
        };

        // --- Sipariş İptal ---
        window.cancelOrder = function(orderId){
            const dark = $('html').attr('data-theme') === 'dark';

            Swal.fire({
                title: 'Siparişi iptal etmek istiyor musunuz?',
                text: 'Bu işlem geri alınamaz.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Tamam',
                cancelButtonText: 'İptal',
                confirmButtonColor: dark ? '#0d6efd' : '#007bff', // buton rengi tema uyumlu
                cancelButtonColor: dark ? '#6c757d' : '#6c757d',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result => {
                if(result.isConfirmed){
                    $.post('/Admin/Order/Cancel', {
                        id: orderId,
                        __RequestVerificationToken: getToken()
                    })
                    .done(() => showToast('Sipariş başarıyla iptal edildi.', 'success', dark))
                    .fail(() => showToast('Sipariş iptal edilemedi.', 'error', dark));
                }
            });
        };

        document.getElementById('pageSizeSelect').addEventListener('change', function() {
            const pageSize = this.value;
            window.location.href = '@Url.Action("Index", "Order", new { area = "Admin" })?page=1&pageSize=' + pageSize;
        });

        });
    </script>
}
