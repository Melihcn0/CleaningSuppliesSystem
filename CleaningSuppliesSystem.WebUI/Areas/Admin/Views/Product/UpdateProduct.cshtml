@model UpdateProductDto

@{
    ViewData["Title"] = "Ürün Güncelleme Sayfası";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<form id="updateProductForm" method="post" asp-action="UpdateProduct" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="ImageUrl" />
    <input type="hidden" name="existingImageUrl" value="@ViewBag.ExistingImageUrl" />

    <!-- Kategori -->
    <div class="form-group">
        <label asp-for="CategoryId" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Kategori Seçin <span class="text-danger-600">*</span>
        </label>
        <select asp-for="CategoryId" asp-items="@ViewBag.Categories" class="form-control" required>
            <option value="" disabled>Ürün Grubu / Kategori Seçin</option>
        </select>
        <span asp-validation-for="CategoryId" class="text-danger"></span>
    </div>

    <!-- Marka -->
    <div class="form-group">
        <label asp-for="BrandId" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Marka Seçin <span class="text-danger-600">*</span>
        </label>
        <select asp-for="BrandId" asp-items="@ViewBag.brands" class="form-control" required>
            <option value="" disabled>Marka Seçin</option>
        </select>
        <span asp-validation-for="BrandId" class="text-danger"></span>
    </div>

    <!-- Ad -->
    <div class="form-group">
        <label asp-for="Name" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Ürün Adı <span class="text-danger-600">*</span>
        </label>
        <input asp-for="Name" class="form-control" maxlength="70" required/>
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <!-- Fiyat -->
    <div class="form-group">
        <label asp-for="UnitPrice" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Birim Fiyatı <span class="text-danger-600">*</span>
        </label>
        <input asp-for="UnitPrice" class="form-control" max="5000" required/>
        <span asp-validation-for="UnitPrice" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="VatRate" class="form-label fw-semibold text-primary-light text-sm mb-8">
            % KDV Oranı <span class="text-danger-600">*</span>
        </label>
        <input asp-for="VatRate" class="form-control" max="100" required/>
        <span asp-validation-for="VatRate" class="text-danger"></span>
    </div>

    <!-- Mevcut & Yeni Görsel -->
    @if (!string.IsNullOrEmpty(ViewBag.ExistingImageUrl))
    {
        <div class="form-group">
            <label>Fotoğraf Değişikliği</label>
            <div style="display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
                <div id="existingPreviewContainer" style="text-align: center;">
                    <p>Mevcut</p>
                    <img src="@ViewBag.ExistingImageUrl" class="img-thumbnail" style="max-height: 150px;" />
                </div>

                <div style="font-size: 2rem;">➡</div>

                <div id="newPreviewContainer" style="display: none; text-align: center;">
                    <p>Yeni</p>
                    <img id="imagePreview" src="#" class="img-thumbnail" style="max-height: 150px;" />
                </div>
            </div>
        </div>
    }

    <!-- Görsel Yükleme -->
    <div class="form-group">
        <label asp-for="ImageFile" class="form-label fw-semibold text-primary-light text-sm mb-8">
            Yeni Fotoğraf Yükle(güncellemek için) <span class="text-danger-600">*</span>
        </label>
        <input asp-for="ImageFile" type="file" class="form-control-file" accept="image/*" onchange="previewImage(event)" />
        <span asp-validation-for="ImageFile" class="text-danger"></span>
    </div>

    <br />
    <button type="button" class="btn rounded-pill btn-warning-600 radius-8 d-inline-flex align-items-center btn-sm" onclick="updateProduct()">
        <span class="material-symbols-outlined me-1 d-inline-flex align-items-center" style="font-size: 18px;">update</span>
        Güncelle
    </button>
</form>

@section Scripts {
    <script>
        // Görsel önizleme
        function previewImage(event) {
            const input = event.target;
            const previewContainer = document.getElementById('newPreviewContainer');
            const img = document.getElementById('imagePreview');

            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    img.src = e.target.result;
                    img.style.display = 'block';
                    previewContainer.style.display = 'block';
                };
                reader.readAsDataURL(input.files[0]);
            } else {
                img.src = "#";
                img.style.display = 'none';
                previewContainer.style.display = 'none';
            }
        }

        // Kategori değişince markaları yükleme ve mevcut markayı seçili bırakma
        document.addEventListener('DOMContentLoaded', () => {
            const categorySelect = document.getElementById('CategoryId');
            const brandSelect = document.getElementById('BrandId');
            const currentBrandId = '@Model.BrandId';

            async function loadBrands(categoryId) {
                brandSelect.innerHTML = '<option value="" disabled selected>Marka Seçin</option>';
                if (!categoryId) return;

                try {
                    const response = await fetch(`/Admin/Product/GetBrandsByCategory?categoryId=${categoryId}`);
                    if (!response.ok) throw new Error('Markalar alınamadı');

                    const brands = await response.json();

                    if (brands.length === 0) {
                        const placeholder = document.createElement('option');
                        placeholder.text = 'Bu kategoriye ait marka bulunamadı';
                        placeholder.disabled = true;
                        placeholder.selected = true;
                        brandSelect.appendChild(placeholder);
                        return;
                    }

                    brands.forEach(b => {
                        const option = document.createElement('option');
                        option.value = b.id;
                        option.text = b.name;
                        if (b.id.toString() === currentBrandId) option.selected = true;
                        brandSelect.appendChild(option);
                    });
                } catch (err) {
                    console.error(err);
                    alert('Markalar yüklenemedi. Lütfen sayfayı yenileyin.');
                }
            }

            categorySelect.addEventListener('change', function () {
                loadBrands(this.value);
            });

            // Sayfa yüklendiğinde mevcut kategori varsa markaları yükle
            if (categorySelect.value) loadBrands(categorySelect.value);
        });

        // Form submit
        function updateProduct() {
            const form = document.getElementById("updateProductForm");
            const theme = document.documentElement.getAttribute("data-theme");

            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            Swal.fire({
                title: "Değişiklikler kaydedilsin mi?",
                text: "İşlemi onaylıyor musunuz?",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Evet, kaydet!",
                cancelButtonText: "İptal",
                background: theme === "dark" ? "#1e1e2f" : "#fff",
                color: theme === "dark" ? "#fff" : "#000",
                reverseButtons: true,
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit();
                }
            });
        }
    </script>
}
