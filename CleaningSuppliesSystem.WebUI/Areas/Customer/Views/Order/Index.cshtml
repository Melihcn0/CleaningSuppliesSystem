@model PagedResponse<CustomerResultOrderDto>

@{
    ViewData["Title"] = "Siparişlerim";
    Layout = "~/Views/Shared/_CustomerLayout.cshtml";

    string formattedIban = "-";
    if (ViewBag.AdminIban != null)
    {
        string iban = (string)ViewBag.AdminIban;
        formattedIban = "";
        for (int i = 0; i < iban.Length; i += 4)
        {
            if (i + 4 <= iban.Length)
                formattedIban += iban.Substring(i, 4) + " ";
            else
                formattedIban += iban.Substring(i);
        }
        formattedIban = formattedIban.Trim();
    }
    string accountHolder = ViewBag.AdminNameSurname ?? "-";
}

<div class="p-16 bg-neutral-100 radius-8 border-start-width-3-px border-neutral-600 border-top-0 border-end-0 border-bottom-0 mb-3 shadow-sm">
        <h6 class="mb-2" style="font-size: 1rem;">Sipariş İşlemleri Hakkında Bilgilendirme</h6>
        <ul class="mb-2 ps-3" style="list-style-type: disc; font-size: 0.9rem;">
            <li>Sepetinizi onayladıktan sonra ödeme gerçekleştirebilirsiniz.</li>
            <li>Ödenecek tutarı havale ettiğinizde siparişiniz hazırlanacaktır.</li>
            <li>Siparişiniz kargoya verildiğinde durumu otomatik olarak güncellenecektir.</li>
            <li>Sipariş detaylarına daha fazla bilgi için "Daha Fazla" butonuna basabilirsiniz.</li>
        </ul>
        <strong>
            <small class="d-block mt-2">
                Not: Fatura oluşturulduktan sonra sipariş numarasını kontrol etmeyi unutmayın.
            </small>
        </strong>
    <div class="mt-2" style="font-size: 0.9rem;">
        <strong>Alıcı:</strong> <span id="admin-name">@accountHolder</span><br>
        <strong>IBAN:</strong> <span id="admin-iban">@formattedIban</span><br>
        <strong>Açıklama:</strong> [Sipariş No]
    </div>
</div>

<div class="card basic-data-table">
    @Html.AntiForgeryToken()
    <div class="card-header d-flex justify-content-between align-items-center flex-wrap">
        <h5 class="card-title mb-0">Sipariş Listesi</h5>
    </div>
    <div class="card-body">
        <!-- Filtreleme ve sayfa başına veri dropdown'u -->
        <div class="d-flex align-items-center mb-2 gap-3">
            <!-- Arama label + input -->
            <div class="d-flex align-items-center">
                <label for="customSearch" class="me-3">Ara :</label>
                <input type="text" id="customSearch" class="form-control" placeholder="Ara..." style="width: 200px;" />
            </div>

            <div class="d-flex align-items-center">
                <label for="pageSizeSelect" class="me-3">Sayfa başına :</label>
                <select id="pageSizeSelect" class="form-select w-auto select-balanced">
                    @foreach (var size in new int[] { 10, 30, 50, 100 })
                    {
                        if (Model.PageSize == size)
                        {
                            <option value="@size" selected>@size</option>
                        }
                        else
                        {
                            <option value="@size">@size</option>
                        }
                    }
                </select>
            </div>

        </div>
        @if (Model != null && Model.Data.Any())
        {
            <div class="table-responsive" style="overflow-y: hidden;">
                <table class="table table-hover mb-0" id="dataTable" style="width: 100%; margin-top: 10px;">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Sipariş No</th>
                            <th>Sipariş Tarihi</th>
                            <th>Ödenecek Tutar</th>
                            <th>Sipariş Durumu</th>
                            <th>Detay</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Data.Count; i++)
                        {
                            var order = Model.Data[i];
                            var statusClass = order.Status switch
                            {
                                "Teslim Edildi" => "badge text-sm fw-semibold bg-dark-success-gradient px-20 py-9 radius-4 text-white",
                                "Hazırlanıyor" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
                                "İptal Edildi" => "badge text-sm fw-semibold bg-dark-danger-gradient px-20 py-9 radius-4 text-white",
                                "Kargoya Verildi" => "badge text-sm fw-semibold bg-dark-primary-gradient px-20 py-9 radius-4 text-white",
                                "Onay Bekleniyor" => "badge text-sm fw-semibold bg-dark-warning-gradient px-20 py-9 radius-4 text-white",
                                "Onaylandı" => "badge text-sm fw-semibold bg-dark-success-gradient px-20 py-9 radius-4 text-white",
                                _ => "badge text-sm fw-semibold bg-dark-dark-gradient px-20 py-9 radius-4 text-white"
                            };

                            <tr>
                                <td>@(i + 1)</td>
                                <td><strong>#@order.OrderNumber.Substring(order.OrderNumber.IndexOf('-') + 1)</strong></td>
                                <td>
                                    <span>
                                        🟢 <b>Oluşturma:</b>
                                        @order.CreatedDate.ToString("dd.MM.yyyy HH:mm")
                                    </span>
                                </td>
                                <td>@order.TotalAmountWithVat.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</td>

                                <td>
                                    <span class="@statusClass">@order.Status</span>
                                </td>
                                <td>
                                    <div class="d-flex flex-nowrap gap-2">
                                        @if (order.Status == "Onay Bekleniyor")
                                        {
                                            <a href="#" class="btn rounded-pill btn-lilac-100 text-lilac-600 radius-8 d-inline-flex align-items-center btn-sm js-show-order-detail" data-order-id="@order.Id" title="Detay">
                                                <span class="material-symbols-outlined me-1">read_more</span> Daha Fazla..
                                            </a>
                                            <button type="button" class="btn rounded-pill btn-success-100 text-success-600 radius-8 d-inline-flex align-items-center btn-sm" onclick="confirmOrder(@order.Id)">
                                                <span class="material-symbols-outlined me-1">check_circle</span> Siparişi Onayla
                                            </button>
                                            <button type="button" class="btn rounded-pill btn-danger-100 text-danger-600 radius-8 d-inline-flex align-items-center btn-sm" onclick="cancelOrder(@order.Id)">
                                                <span class="material-symbols-outlined me-1">cancel</span> İptal Et
                                            </button>
                                        }                                        
                                        else
                                        {
                                            <a href="#" class="btn rounded-pill btn-lilac-100 text-lilac-600 radius-8 d-inline-flex align-items-center btn-sm js-show-readonly-order" data-order-id="@order.Id" title="Detay">
                                                <span class="material-symbols-outlined me-1">read_more</span> Daha Fazla..
                                            </a>
                                            @if (order.Status != "Onay Bekleniyor" && order.Status != "Onaylandı" && order.Status != "İptal Edildi")
                                            {
                                                <a asp-controller="Order" asp-action="DownloadInvoice" asp-route-orderId="@order.Id" class="btn rounded-pill btn-neutral-100 text-neutral-600 radius-8 d-inline-flex align-items-center btn-sm" title="Faturayı İndir">
                                                    <span class="material-symbols-outlined me-1">download</span> Faturayı İndir
                                                </a>
                                            }
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between align-items-center pt-3">
                    <div id="tableInfo" class="text-secondary-light fw-medium"></div>

                    @if (Model.TotalPages > 1)
                    {
                        <ul class="pagination d-flex flex-wrap align-items-center justify-content-end mb-0" style="gap:2px;">
                            <!-- İlk sayfa -->
                            <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px rounded-pill rounded-end-0"
                                   href="@Url.Action("Index", new { page = 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="ep:d-arrow-left" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Önceki -->
                            <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px"
                                   href="@Url.Action("Index", new { page = Model.Page - 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="iconamoon:arrow-left-2-light" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Sayfa numaraları -->
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px @(i == Model.Page ? "bg-primary-600 text-white" : "")"
                                       href="@Url.Action("Index", new { page = i, pageSize = Model.PageSize })">@i</a>
                                </li>
                            }

                            <!-- Sonraki -->
                            <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px"
                                   href="@Url.Action("Index", new { page = Model.Page + 1, pageSize = Model.PageSize })">
                                    <iconify-icon icon="iconamoon:arrow-right-2-light" class="text-lg"></iconify-icon>
                                </a>
                            </li>

                            <!-- Son sayfa -->
                            <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link bg-primary-50 text-secondary-light fw-medium border-0 px-16 py-8 d-flex align-items-center justify-content-center h-40-px w-40-px rounded-pill rounded-start-0"
                                   href="@Url.Action("Index", new { page = Model.TotalPages, pageSize = Model.PageSize })">
                                    <iconify-icon icon="ep:d-arrow-right" class="text-lg"></iconify-icon>
                                </a>
                            </li>
                        </ul>
                    }
                </div>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel"  aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div id="orderDetailModalContent"></div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="orderReadOnlyModal" tabindex="-1" aria-labelledby="orderReadOnlyModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
                    <div class="modal-content">
                        <div id="orderReadOnlyModalContent"></div>
                    </div>
                </div>
            </div>

        }
        else
        {
            <div class="text-center py-5">
                    <i class="fas fa-shopping-cart fa-3x mb-3 opacity-25"></i>
                    <h5>Hiç sipariş bulunamadı</h5>
                    <p>Henüz bir siparişiniz bulunmamaktadır.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(function(){
            let currentOrderId = null;

            // --- Detail Modal ---
            const detailModalEl = $('#orderDetailModal');
            const modalContent = $('#orderDetailModalContent');  
            const bsModal = new bootstrap.Modal($('#orderDetailModal')[0], {backdrop:'static', keyboard:false});


            // --- Readonly Modal ---
            const readonlyModalEl = $('#orderReadOnlyModal');
            const readonlyModalContent = $('#orderReadOnlyModalContent');
            const bsReadonlyModal = new bootstrap.Modal(readonlyModalEl[0], {backdrop:'static', keyboard:false});

            const getToken = () => $('input[name="__RequestVerificationToken"]').val();

            // Event binding
            $(document).on('click', '.js-show-order-detail', function(e){
                e.preventDefault();
                currentOrderId = $(this).data('order-id');
                loadOrderDetail(currentOrderId);
            });

            //readonly tıklaması burada
            $(document).on('click', '.js-show-readonly-order', function(e){
                e.preventDefault();
                currentOrderId = $(this).data('order-id');
                loadOrderReadOnlyDetail(currentOrderId); // 
            });

               // Spinner gösterme fonksiyonu
        function showLoading(contentEl) {
            contentEl.html(`
                <div class="modal-header">
                    <h5 class="modal-title">Yükleniyor...</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
                </div>
                <div class="modal-body text-center p-5">
                    <div class="spinner-border text-primary" role="status"></div>
                </div>
            `);
        }

        // Sipariş Detay Modalı
        function loadOrderDetail(orderId) {
            showLoading(modalContent);
            bsModal.show(); // ✅ Doğru modal

            $.get('/Customer/Order/OrderDetails/' + orderId)
                .done(function(data) {
                    if ($(data).find('tbody tr').length === 0) return location.reload();
                    modalContent.html(data);
                    initOrderDetailDataTable();
                })
                .fail(function(xhr) {
                    let msg = xhr.status === 403 ? "Bu siparişi görüntüleme yetkiniz yok." :
                              xhr.status === 404 ? "Sipariş bulunamadı." : "Sipariş detayı yüklenemedi.";
                    modalContent.html(`<div class="alert alert-danger">${msg}</div>`);
                });
        }


        // --- Salt Okunur Modal ---
        function loadOrderReadOnlyDetail(orderId) {
            showLoading(readonlyModalContent); // readonlyModalContent = #orderReadOnlyModalContent
            bsReadonlyModal.show();             // Doğru modal açılıyor

            $.get('/Customer/Order/ReadOnlyDetails/' + orderId)
                .done(function(data) {
                    if ($(data).find('tbody tr').length === 0) return location.reload();
                    readonlyModalContent.html(data);
                    initReadOnlyOrderDataTable();
                })
                .fail(function(xhr) {
                    let msg = xhr.status === 403 ? "Bu siparişi görüntüleme yetkiniz yok." :
                              xhr.status === 404 ? "Sipariş bulunamadı." : "Sipariş detayı yüklenemedi.";
                    readonlyModalContent.html(`<div class="alert alert-danger">${msg}</div>`);
                });
        }

        function postOrderAction(url, data, successMsg, errorMsg){
                $.post(url, data)
                .done(()=>loadOrderDetail(currentOrderId, successMsg))
                .fail(()=>loadOrderDetail(currentOrderId, errorMsg, false));
            }


        function showToast(message, type='success', dark=false){
            Swal.fire({
                icon: type, // success veya error
                title: type === 'success' ? 'Başarılı' : 'Hata',
                html: message,
                timer: 1500,
                timerProgressBar: true,
                showConfirmButton: false, // buton kaldırıldı
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                    const bar = document.querySelector('.swal2-timer-progress-bar');
                    if(bar) bar.style.backgroundColor = type === 'success' ? '#28a745' : '#dc3545';
                }
            });
        }

                // --- Miktar Arttır ---
        $(document).on('click', '.btn-increment', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem seçilen ürüne yalnızca 1 adet ekleyecektir.',
                icon:'question',
                showCancelButton:true,
                confirmButtonText:'Evet, arttır',
                cancelButtonText:'Hayır',
                confirmButtonColor: dark ? '#198754' : '#28a745',
                cancelButtonColor: dark ? '#dc3545' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

            addHoverEffect(confirmBtn, "#198754");
            addHoverEffect(cancelBtn, "#dc3545");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Customer/Order/Increment',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Miktar başarıyla arttırıldı.', 'success', dark);
                        $.get('/Customer/Order/OrderDetails/' + currentOrderId, function(data){
                            if($(data).find('tbody tr').length === 0) location.reload();
                            else loadOrderDetail(currentOrderId);
                        });
                    })
                    .fail(()=>showToast('Miktar arttırılamadı.', 'error', dark));
                }
            });
        });



        // --- Miktar Azalt ---
        $(document).on('click', '.btn-decrement', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem seçilen üründen yalnızca 1 adet azaltacaktır.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Evet, azalt',
                cancelButtonText:'Hayır',
                confirmButtonColor: dark ? '#198754' : '#28a745',
                cancelButtonColor: dark ? '#dc3545' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

            addHoverEffect(confirmBtn, "#198754");
            addHoverEffect(cancelBtn, "#dc3545");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Customer/Order/Decrement',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Miktar başarıyla azaltıldı.', 'success', dark);
                        $.get('/Customer/Order/OrderDetails/' + currentOrderId, function(data){
                            if($(data).find('tbody tr').length === 0) location.reload();
                            else loadOrderDetail(currentOrderId);
                        });
                    })
                    .fail(()=>showToast('Miktar azaltılamadı.', 'error', dark));
                }
            });
        });

        // --- Ürün Sil ---
        $(document).on('click', '.btn-remove', function(){
            const id = $(this).data('id');
            const dark = $('html').attr('data-theme')==='dark';

            Swal.fire({
                title:'Emin misiniz?',
                text:'Bu işlem ile sepetten bu ürünün tamamı çıkarılacaktır.',
                icon:'warning',
                showCancelButton:true,
                confirmButtonText:'Tamam',
                cancelButtonText:'İptal',
                confirmButtonColor: dark ? '#0d6efd' : '#007bff',
                cancelButtonColor: dark ? '#6c757d' : '#6c757d',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick:false, allowEscapeKey:false, allowEnterKey:false, reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result=>{
                if(result.isConfirmed){
                    $.post('/Customer/Order/Remove',{id, orderId:currentOrderId,__RequestVerificationToken:getToken()})
                    .done(()=>{
                        showToast('Ürün başarıyla silindi.', 'success', dark);
                        $.get('/Customer/Order/OrderDetails/' + currentOrderId, function(data){
                            if($(data).find('tbody tr').length === 0) location.reload();
                            else loadOrderDetail(currentOrderId);
                        });
                    })
                    .fail(()=>showToast('Ürün silinemedi.', 'error', dark));

                }
            });
        });

                window.cancelOrder = function(orderId){
            const dark = $('html').attr('data-theme') === 'dark';

            Swal.fire({
                title: 'Siparişi iptal etmek istiyor musunuz?',
                text: 'Bu işlem geri alınamaz.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'İptal Et',
                cancelButtonText: 'Hayır',
                confirmButtonColor: dark ? '#0d6efd' : '#28a745',
                cancelButtonColor: dark ? '#6c757d' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result => {
                if(result.isConfirmed){
                           $.ajax({
                            url: '/Customer/Order/UpdateStatus',
                            type: 'POST',
                            contentType: 'application/json',   // JSON olarak gönder
                            data: JSON.stringify({
                                id: orderId,
                                status: "İptal Edildi"
                            }),
                            headers: {
                                'RequestVerificationToken': getToken()   // token varsa header üzerinden
                            },
                            success: function() {
                                showToast('Sipariş başarıyla iptal edildi.', 'success', dark);
                                setTimeout(() => location.reload(), 1500);
                            },
                            error: function() {
                                showToast('Sipariş iptal edilemedi.', 'error', dark);
                            }
                        });

                }
            });
        };


        window.confirmOrder = function(orderId){
            const dark = $('html').attr('data-theme') === 'dark';

            Swal.fire({
                title: 'Siparişi onaylamak istiyor musunuz?',
                text: 'Bu işlem geri alınamaz.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Onayla',
                cancelButtonText: 'Hayır',
                confirmButtonColor: dark ? '#0d6efd' : '#28a745',
                cancelButtonColor: dark ? '#6c757d' : '#dc3545',
                background: dark ? '#1e1e2f' : '#fff',
                color: dark ? '#fff' : '#000',
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false,
                reverseButtons: true,
                didOpen: () => {
                const confirmBtn = Swal.getConfirmButton();
                const cancelBtn = Swal.getCancelButton();

                const addHoverEffect = (btn, color) => {
                    if (!btn) return;
                    btn.style.transition = "all 0.3s ease";
                    btn.addEventListener("mouseenter", () => {
                        btn.style.boxShadow = `0 4px 20px 0 ${color}80`;
                        btn.style.transform = "translateY(-2px)";
                    });
                    btn.addEventListener("mouseleave", () => {
                        btn.style.boxShadow = "none";
                        btn.style.transform = "translateY(0)";
                    });
                };

                addHoverEffect(confirmBtn, "#3085d6");
                addHoverEffect(cancelBtn, "#ff4d4f");
            }
            }).then(result => {
                if(result.isConfirmed){
                    $.ajax({
                        url:'/Customer/Order/UpdateStatus',
                        type:'POST',
                        contentType:'application/json',
                        data: JSON.stringify({Id:orderId, Status:'Onaylandı'}),
                        headers:{'RequestVerificationToken':getToken()},
                        success: () => {
                            showToast('Sipariş başarıyla onaylandı.', 'success', dark);
                            setTimeout(() => location.reload(), 1500);
                        },
                        error: () => showToast('Sipariş onaylanamadı.', 'error', dark)
                    });
                }
            });
        };



        });

        document.getElementById('pageSizeSelect').addEventListener('change', function() {
            const pageSize = this.value;
            window.location.href = '@Url.Action("Index", "Order", new { area = "Customer" })?page=1&pageSize=' + pageSize;
        });

    </script>

}